{"version":3,"sources":["webpack:///./node_modules/gatsby-theme-ghost-casper/src/components/PostList.js","webpack:///./node_modules/gatsby-theme-ghost-casper/src/templates/tags.js"],"names":["PostList","props","handleScroll","ticking","requestAnimationFrame","update","document","documentElement","offsetHeight","window","scrollY","innerHeight","setState","postsToShow","state","postsPerPage","maxPages","removeEventListener","posts","length","componentDidMount","addEventListener","this","componentWillUnmount","render","id","className","slice","map","post","index","key","node","React","Component","TagTemplate","pageContext","data","location","tag","allMarkdownRemark","edges","totalCount","title","site","siteMetadata","bodyAttributes","class","description","pageQuery"],"mappings":"oKAGA,IAEqBA,E,oBACnB,WAAYC,GAAQ,IAAD,SACjB,cAAMA,IAAN,MAiBFC,aAAe,WACR,EAAKC,UAER,EAAKA,SAAU,EACfC,uBAAsB,kBAAM,EAAKC,cAtBlB,EA0BnBA,OAAS,WAELC,SAASC,gBAAgBC,cACxBC,OAAOC,QAAUD,OAAOE,aAhCT,KAmChB,EAAKC,SACH,CACEC,YAAa,EAAKC,MAAMD,YAAc,EAAKZ,MAAMc,eAEnD,WACM,EAAKD,MAAMD,aAAe,EAAKG,UACjCP,OAAOQ,oBAAoB,SAAU,EAAKf,iBAIlD,EAAKC,SAAU,GAxCf,EAAKW,MAAQ,CACXD,YAAaZ,EAAMc,cAGrB,EAAKC,SAAWf,EAAMiB,MAAMC,OAC5B,EAAKhB,SAAU,EAPE,E,kHAUnBiB,kBAAA,WACEX,OAAOY,iBAAiB,SAAUC,KAAKpB,e,EAGzCqB,qBAAA,WACEd,OAAOQ,oBAAoB,SAAUK,KAAKpB,e,EA8B5CsB,OAAA,WAAU,IACAN,EAAUI,KAAKrB,MAAfiB,MAER,OACE,0BAAMO,GAAG,YAAYC,UAAU,mBAC7B,yBAAKA,UAAU,SACb,yBAAKA,UAAU,aACZR,EAAMS,MAAM,EAAGL,KAAKR,MAAMD,aAAae,KAAI,SAACC,EAAMC,GAAP,OAC1C,kBAAC,IAAD,CAAUC,IAAKD,EAAOD,KAAMA,EAAKG,c,GAtDTC,IAAMC,Y,oCCL5C,mIA0CeC,UAlCK,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAChCC,EAAQH,EAARG,IAD+C,EAEzBF,EAAKG,kBAA3BC,EAF+C,EAE/CA,MAAOC,EAFwC,EAExCA,WACPC,EAAUN,EAAKO,KAAKC,aAApBF,MAER,OACE,kBAAC,IAAD,CAAQL,SAAUA,GAChB,kBAAC,IAAD,CACEK,MAAK,sBAAwBJ,EAAxB,MAAiCI,EACtCG,eAAgB,CACdC,MAAO,kBAGX,4BAAQrB,UAAU,qBAGhB,yBAAKA,UAAU,SACb,kBAAC,IAAD,CAAYY,SAAUA,IACtB,yBAAKZ,UAAU,uBACb,wBAAIA,UAAU,cAAca,GAC5B,wBAAIb,UAAU,oBACXa,EAAIS,aAAJ,mBACoBN,EADpB,SAEGA,EAAa,EAAI,IAAM,QAMnC,kBAAC,IAAD,CAAUxB,MAAOuB,EAAO1B,aAAc,OAOrC,IAAMkC,EAAS","file":"component---node-modules-gatsby-theme-ghost-casper-src-templates-tags-js-77953e56ac550df8c5c1.js","sourcesContent":["import React from 'react';\r\nimport PostCard from './PostCard';\r\n\r\nconst SCROLL_BUFFER = 100;\r\n\r\nexport default class PostList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      postsToShow: props.postsPerPage,\r\n    };\r\n\r\n    this.maxPages = props.posts.length;\r\n    this.ticking = false;\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('scroll', this.handleScroll);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('scroll', this.handleScroll);\r\n  }\r\n\r\n  handleScroll = () => {\r\n    if (!this.ticking) {\r\n      // console.log('Inside scroll handler')\r\n      this.ticking = true;\r\n      requestAnimationFrame(() => this.update());\r\n    }\r\n  };\r\n\r\n  update = () => {\r\n    const distaneToBottom =\r\n      document.documentElement.offsetHeight -\r\n      (window.scrollY + window.innerHeight);\r\n    if (distaneToBottom < SCROLL_BUFFER) {\r\n      // console.log('BU', this.state);\r\n      this.setState(\r\n        {\r\n          postsToShow: this.state.postsToShow + this.props.postsPerPage,\r\n        },\r\n        () => {\r\n          if (this.state.postsToShow >= this.maxPages)\r\n            window.removeEventListener('scroll', this.handleScroll);\r\n        }\r\n      );\r\n    }\r\n    this.ticking = false;\r\n  };\r\n\r\n  render() {\r\n    const { posts } = this.props;\r\n\r\n    return (\r\n      <main id='site-main' className='site-main outer'>\r\n        <div className='inner'>\r\n          <div className='post-feed'>\r\n            {posts.slice(0, this.state.postsToShow).map((post, index) => (\r\n              <PostCard key={index} post={post.node} />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { graphql } from 'gatsby';\r\nimport Helmet from 'react-helmet';\r\n\r\nimport Layout from '../components/Layout';\r\nimport PostList from '../components/PostList';\r\nimport Navigation from '../components/Navigation';\r\n\r\nconst TagTemplate = ({ pageContext, data, location }) => {\r\n  const { tag } = pageContext;\r\n  const { edges, totalCount } = data.allMarkdownRemark;\r\n  const { title } = data.site.siteMetadata;\r\n\r\n  return (\r\n    <Layout location={location}>\r\n      <Helmet\r\n        title={`Posts tagged under ${tag} - ${title}`}\r\n        bodyAttributes={{\r\n          class: 'tag-template',\r\n        }}\r\n      />\r\n      <header className='site-header outer'>\r\n        {/* {{#if feature_image}} */}\r\n        {/* // style='background-image: url({{feature_image}}){{else}}no-cover{{/if}}'> */}\r\n        <div className='inner'>\r\n          <Navigation location={location} />\r\n          <div className='site-header-content'>\r\n            <h1 className='site-title'>{tag}</h1>\r\n            <h2 className='site-description'>\r\n              {tag.description ||\r\n                `A collection of ${totalCount} post${\r\n                  totalCount > 1 ? 's' : ''\r\n                }`}\r\n            </h2>\r\n          </div>\r\n        </div>\r\n      </header>\r\n      <PostList posts={edges} postsPerPage={10} />\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default TagTemplate;\r\n\r\nexport const pageQuery = graphql`\r\n  query($tag: String) {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n        siteUrl\r\n      }\r\n    }\r\n\r\n    allMarkdownRemark(\r\n      sort: { order: DESC, fields: [frontmatter___date] }\r\n      filter: { frontmatter: { tags: { in: [$tag] }, draft: { ne: true } } }\r\n    ) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          ...PostCardFragment\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"sourceRoot":""}